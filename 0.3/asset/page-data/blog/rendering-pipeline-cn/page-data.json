{"componentChunkName":"component---src-templates-docs-tsx","path":"/blog/rendering-pipeline-cn","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>作者：<a href=\"https://github.com/zhuxudong\">慎思</a>\n​</p>\n</blockquote>\n<h2 id=\"引言\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E8%A8%80\" aria-label=\"引言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引言</h2>\n<p>通常而言，在图形学中，我们所说的“<strong>渲染</strong>”(Rendering)，指在给定虚拟相机、三维物体、光源等条件下，在屏幕等终端生成或绘制一幅二维图像的过程。\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805160286-65a9d3fc-89c8-4a4b-b5c8-80124e540c1c.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u95b91ca9&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620373084300-b77b40e4-546e-4808-a9ad-e70610dd1a86.png&#x26;originHeight=582&#x26;originWidth=2146&#x26;originalType=binary&#x26;size=599231&#x26;status=done&#x26;style=none&#x26;taskId=u864c50bf-bfa9-4ad6-8f61-c8a66b542cb\" alt=\"1620373084300-b77b40e4-546e-4808-a9ad-e70610dd1a86.png\">\n如下图所示，渲染管线一般包含了三大阶段。其中<strong>应用程序阶段</strong>（Application）可以理解为数据准备阶段，Oasis 引擎在这里准备了着色器编译、视锥体裁剪、渲染队列排序、着色器数据等初始化工作；<strong>几何体阶段</strong>（Geometry Processing）将上述数据经过顶点着色器、投影变换、裁剪、屏幕映射一系列处理后输出到屏幕坐标系上；<strong>光栅化阶段</strong>（Rasterizer）将上一个阶段的顶点栅格化成一个个片元，然后经过片元着色器、颜色融合等操作，给每一个像素点描绘出相应的颜色。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805180283-d2a27833-67a2-4a4b-9ebc-13bf28b2cfc3.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=uc2132e97&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620451156989-1463a5a7-ce6c-4329-beaf-f8c974cfd30c.png&#x26;originHeight=329&#x26;originWidth=1030&#x26;originalType=binary&#x26;size=34407&#x26;status=done&#x26;style=none&#x26;taskId=u58a212b1-6923-4fff-bccb-8eccf677134\" alt=\"1620451156989-1463a5a7-ce6c-4329-beaf-f8c974cfd30c.png\"></p>\n<p>在动态场景中，相机、三维物体、光源等对象都是在不断变化的，也就是我们每一帧都需要执行一遍渲染管线。而一般画面度流畅的最低要求为 FPS > 30，即走一遍渲染管线的时间需要少于 <strong>33</strong>（1000 / 30）毫秒。Oasis 引擎在 0.3 里程碑中，<strong>借助</strong><a href=\"https://oasisengine.cn/#/0.3/manual/zh-cn/resource/custom-material\"><strong>材质系统</strong></a><strong>对渲染管线进行了全面重构，</strong> 通过 <a href=\"https://oasis-engine.github.io/0.3/playground/#/skeleton-animation\">骨骼动画</a> demo （如下图所示，面数 728300，drawcall 50 次，不采用 Instance 合批等技术）的测试，在近 100 万面的浏览器 <strong>6 倍降频</strong>渲染中，跟渲染相关的 <strong>render</strong> 方法只占用了 <strong>900 微秒</strong>（ 0.2 版本渲染相同的场景 <strong>render</strong> 方法需要耗时 10 ms）！\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805285242-b6d92cac-1b5b-4490-a961-19e69f399514.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u1fdb997c&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620487677757-b4061d96-bf05-486f-a9e0-efbafef02cf5.png&#x26;originHeight=1402&#x26;originWidth=3006&#x26;originalType=binary&#x26;size=1330669&#x26;status=done&#x26;style=none&#x26;taskId=u7ff8d62d-27b0-4df0-948b-887405a0169\" alt=\"1620487677757-b4061d96-bf05-486f-a9e0-efbafef02cf5.png\">\nMacBook Pro，2.7GHz 四核 Intel Core i7，Intel Iris Plus Graphics 655 1536 MB，Google Chrome 90.0</p>\n<p>本文将重点针对<strong>应用程序阶段，</strong>从数据结构、语法、架构设计等角度分析 <strong>Oasis 引擎的渲染管线是如何设计和优化的。</strong></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805304333-57bc870a-d24e-46e9-a94d-848acd7382b2.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u03d174c2&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620617353816-57c02c68-8c20-44e8-ac75-6579c9d0c00f.png&#x26;originHeight=1246&#x26;originWidth=4426&#x26;originalType=binary&#x26;size=331167&#x26;status=done&#x26;style=none&#x26;taskId=u59ffe783-279c-450c-ade6-471af79eca2\" alt=\"1620617353816-57c02c68-8c20-44e8-ac75-6579c9d0c00f.png\"></p>\n<h2 id=\"视锥体剔除\" style=\"position:relative;\"><a href=\"#%E8%A7%86%E9%94%A5%E4%BD%93%E5%89%94%E9%99%A4\" aria-label=\"视锥体剔除 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>视锥体剔除</h2>\n<p>第一个阶段是视锥体剔除。</p>\n<p>假如场景中所有激活的物体都会进入接下去的渲染管线，但是有些物体其实是在相机的视锥体范围之外的，那么这些视锥体之外物体的渲染其实是多余的，尤其是面数比较多的模型，会大大浪费性能。我们把在渲染管线开始之前，将相机视锥体范围之外的物体进行排除的这种操作，称为视锥体剔除，如 <a href=\"https://oasisengine.cn/0.3/playground/#/renderer-cull\">视锥体剔除 Demo</a>。\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805412000-66fdbcab-7909-467b-ad69-babb3c9f16d0.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u16ec8f87&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620290443769-64f2e7f0-705d-42df-84ba-67f99ac44cc9.png&#x26;originHeight=658&#x26;originWidth=1036&#x26;originalType=binary&#x26;size=136535&#x26;status=done&#x26;style=none&#x26;taskId=u2de1a11f-a447-4095-b48c-a063a766eee\" alt=\"1620290443769-64f2e7f0-705d-42df-84ba-67f99ac44cc9.png\">\nOasis 引擎底层首先会利用脏标记检测<a href=\"https://oasisengine.cn/0.3/api/classes/math.boundingfrustum.html\">视锥体</a>是否发生变化，从而更新<strong>视锥体</strong>；\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805437228-fc74dbbf-72ec-4781-832c-ae08e2918b5a.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u230a326d&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620457358641-33cf5c35-64ab-488f-8a39-cb5595449fcb.png&#x26;originHeight=304&#x26;originWidth=2262&#x26;originalType=binary&#x26;size=454609&#x26;status=done&#x26;style=none&#x26;taskId=uf6bd8a8f-d1e6-475b-8aee-42298dfb89d\" alt=\"1620457358641-33cf5c35-64ab-488f-8a39-cb5595449fcb.png\">然后将视锥体与物体的<a href=\"https://oasisengine.cn/0.3/api/classes/math.boundingbox.html\"> AABB 包围盒</a>进行碰撞检测；同理，物体的包围盒是否发生变化也采用了脏标记检测：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805458961-2e791f4d-941e-4671-ad8d-03877b03bfe3.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u23200720&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620457327131-d2981d0c-560f-49aa-9b08-5893125f86f0.png&#x26;originHeight=610&#x26;originWidth=1076&#x26;originalType=binary&#x26;size=394253&#x26;status=done&#x26;style=none&#x26;taskId=udaa8517a-df65-4943-9e89-61b6061f1fb\" alt=\"1620457327131-d2981d0c-560f-49aa-9b08-5893125f86f0.png\">\n顺便一提，包围盒的更新使用了 <a href=\"https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/\">component-wise</a> 算法，只需要对两个矢量运算即可得到包围盒的世界坐标系：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805473200-cee41bc2-513b-498c-b2bc-47fedee897b3.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u0d86097a&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620620113756-c054d4dc-f614-41fa-a3e0-a9e91a15c416.png&#x26;originHeight=1274&#x26;originWidth=1734&#x26;originalType=binary&#x26;size=1618177&#x26;status=done&#x26;style=none&#x26;taskId=uc1dd94b0-658d-4475-ab09-a546b699244\" alt=\"1620620113756-c054d4dc-f614-41fa-a3e0-a9e91a15c416.png\">\n最后，只有视锥体<strong>包含</strong>或者<strong>交叉</strong>物体包围盒的物体才会进入渲染管线，减少了后续管线压力，提升了性能。</p>\n<h2 id=\"渲染队列排序\" style=\"position:relative;\"><a href=\"#%E6%B8%B2%E6%9F%93%E9%98%9F%E5%88%97%E6%8E%92%E5%BA%8F\" aria-label=\"渲染队列排序 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染队列排序</h2>\n<p>第二个阶段是渲染队列排序。</p>\n<p>在渲染管线中，物体的默认渲染队列是无序的，即物体与相机的距离远近，透明度等不同渲染状态因素都不受控制，<strong>渲染效果的正确性、管线性能</strong>都会受到影响，因此引擎将渲染队列分成了不透明（Opaque）、透明度测试（AlphaTest）、透明（Transparent） 三种队列。\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805537862-f0e7a05a-0adf-4d4f-bebd-2e57ceb81c84.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u7b3a88a6&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620614678257-9e7b1846-d876-4ff4-95a6-bfebd8767884.png&#x26;originHeight=1058&#x26;originWidth=4692&#x26;originalType=binary&#x26;size=437748&#x26;status=done&#x26;style=none&#x26;taskId=ub3827878-2e89-4ad2-a7fb-382981a0e56\" alt=\"1620614678257-9e7b1846-d876-4ff4-95a6-bfebd8767884.png\"></p>\n<ul>\n<li><strong>不透明队列从近到远排序</strong>。我们一般会对非透明物体进行从近到远排序，这是因为当我们开启<strong>深度测试</strong>后，深度测试<strong>失败</strong>的片元将不进行颜色融合，支持** early-Z** 的 GPU 还会直接跳过片元着色器；又因为深度测试失败的默认配置为 z1 > z2 ，即距离较远的片元会深度测试失败，所以我们对非透明物体进行从近到远排序，可以最大程度地剔除后续深度测试失败的片元，达到性能优化；值得一提的是，有些 GPU 架构比如 PowerVR 支持<a href=\"http://cdn.imgtec.com/sdk-documentation/PowerVR+Series5.Architecture+Guide+for+Developers.pdf\"> HSR</a>（Hidden Surface Removal）技术，引擎利用此技术能够不排序也能实现 early-Z 剔除效果，因此从近到远排序并不是必然的选择。</li>\n<li><strong>透明队列从远到近排序</strong>。此排序是为了保障渲染效果的正确性，因为通过色彩叠加原理可知，两种颜色混合的最终结果是受先后顺序影响的。</li>\n<li><strong>排序算法优化</strong>。Oasis 引擎使用了更加高效的排序算法。JS 的内置方法 <strong>Array.sort</strong> 也能实现排序，但是源码里面有太多通用逻辑，会影响性能，感兴趣的可以在这个 <a href=\"https://github.com/oasis-engine/engine/issues/36\">Oasis Issue</a> 里面进行讨论。顺便一提，除了 Array.sort，JS 的很多内置方法都是为了通用性考虑，如果追求极致性能，需要针对引擎做特殊优化，如 **Array.forEach **这个数组内置方法是用来实现遍历的，但是源码里面有太多判断数组相关的逻辑，还有传回调堆栈等非引擎需要的功能，因此引擎内部尽量使用 for 循环来实现遍历会更加的高效，特别是帧级别的调用。</li>\n</ul>\n<h2 id=\"编译着色器\" style=\"position:relative;\"><a href=\"#%E7%BC%96%E8%AF%91%E7%9D%80%E8%89%B2%E5%99%A8\" aria-label=\"编译着色器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>编译着色器</h2>\n<p>第三个阶段是编译着色器。</p>\n<p><a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/\">着色器</a>（Shader）包括<strong>顶点着色器</strong>和<strong>片元着色器</strong>，是硬件渲染管线中的可编程模块，我们可以通过编写着色器代码，连接 CPU 和 GPU，控制最后的顶点位置，像素颜色等。</p>\n<p>编译着色器里的一个核心概念是<strong>宏</strong>。我们在写着色器时，<code>#ifdef</code> 等宏命令可以选择是否编译这部分 Shader 代码，除了是否定义了这个宏之外，剩余的 Shader 的代码是完全一样的。我们把某个是否需要定义的宏称为<strong>宏开关</strong>；不同的宏开关组合在引擎中称为<strong>宏集合</strong>；而根据宏集合生成的不同 Shader，称为<strong>着色器变种</strong>。</p>\n<ul>\n<li><strong>自动编译着色器变种</strong>。通常情况下，开发者只需要操作宏开关即可，引擎在运行时会自动根据宏集合是否发生变化来决定是否进行重新编译着色器。</li>\n<li><strong>预编译着色器变种</strong>。如果对于运行时的流畅度要求较高，我们也可以手动调用引擎的 <a href=\"https://oasisengine.cn/0.3/api/classes/core.shader.html#compilevariant\">Shader.compileVariant</a> 方法来进行<strong>预编译</strong>，那么渲染运行时就无需再编译，不会造成卡顿。</li>\n</ul>\n<p><strong>位运算</strong>：因为宏集合中的每一个宏开关其实是一个字符串，而各种宏开关又存在着增删改查等需求，那么如何高效地对字符串组合进行运算，就可以用到<strong>位运算</strong>这个小技巧：我们把每一个宏开关，比如 <code>#ifdef test</code>，当作字节里面的一个“位”（bit），0 表示关闭该宏，1 表示开启该宏，那么一个 32 位的 Int 类型数字就可以表示 32 个宏开关；使用 <code>｜=</code> 就可以实现开启宏，使用 <code>&#x26; ～</code>就可以实现关闭宏；受益于位操作，判断两个宏集合是否变化，只需要判断两个数字是否相等即可。</p>\n<h2 id=\"更新着色器数据\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%96%B0%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%B0%E6%8D%AE\" aria-label=\"更新着色器数据 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新着色器数据</h2>\n<p>第四个阶段是更新着色器数据。</p>\n<p>与 JS、C++ 等编程语言一样，着色器使用 <a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/#glsl\">GLSL</a> 语言，也有变量、函数等概念，不同的是着色器存在于 GPU，我们可以通过 <a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/#uniform\">Uniform</a> 方式上传着色器数据。</p>\n<p>基于着色器中的数据缓存机制，当数据没有发生变化时，可以不用每一帧都上传数据，由此，可以联想到一个优化手段，那就是<strong>分块更新/上传</strong>。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805558367-b90961f7-4452-4c83-9217-529ec114b986.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;height=346&#x26;id=u32192579&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620312672843-86bca06d-d3db-44ff-97ee-a56fbc9c7864.png&#x26;originHeight=692&#x26;originWidth=1166&#x26;originalType=binary&#x26;size=89127&#x26;status=done&#x26;style=none&#x26;taskId=u479d3f8c-234c-4cd0-95f3-86287d91740&#x26;width=583\" alt=\"1620312672843-86bca06d-d3db-44ff-97ee-a56fbc9c7864.png\"></p>\n<p>如上图所示，Oasis 引擎设计将着色器数据 <a href=\"https://oasis-engine.github.io/0.3/api/classes/core.shaderdata.html\">ShaderData</a> 分别保存在 <a href=\"https://oasis-engine.github.io/0.3/api/classes/core.scene.html\">Scene</a>、<a href=\"https://oasis-engine.github.io/0.3/api/classes/core.camera.html\">Camera</a>、<a href=\"https://oasis-engine.github.io/0.3/api/classes/core.renderer.html\">Renderer</a>、<a href=\"https://oasis-engine.github.io/0.3/api/classes/core.material.html\">Material</a> 四大块中。进行分块后，引擎可以在 CPU 分块更新着色器数据，最后分块上传到 GPU，期间还存在一些细小的优化点，接下来分别展开讨论。</p>\n<h3 id=\"cpu-分块更新\" style=\"position:relative;\"><a href=\"#cpu-%E5%88%86%E5%9D%97%E6%9B%B4%E6%96%B0\" aria-label=\"cpu 分块更新 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU 分块更新</h3>\n<p>在很多设计中，着色器相关的数据都存放在了材质（Material）中，也就是说所有的着色器数据都在渲染器更新的时候进行了更新，即使是那些不需要更新的数据，复杂度为 <strong>O(Scene<em>Camera</em>Renderer)，</strong>\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805585108-7f434e5b-2318-4444-8ec0-9f7e08881a8c.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=ue60f0047&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620617666061-efb011d4-10c6-4900-b138-b850821d5636.png&#x26;originHeight=1466&#x26;originWidth=2968&#x26;originalType=binary&#x26;size=310236&#x26;status=done&#x26;style=none&#x26;taskId=u57739e2b-0ed3-4a1e-aae4-0d6937373c2\" alt=\"1620617666061-efb011d4-10c6-4900-b138-b850821d5636.png\"></p>\n<p>而进行了分块之后，更新着色器数据的逻辑就分别放在了场景更新、相机更新、渲染器更新、材质更新里面，复杂度变为 <strong>O(Scene+Camera+Renderer)</strong>，即相应的数据只在相应的钩子里面进行运算；比如着色器中有一个变量，只跟场景相关，那么分块后，只有场景切换的时候，才会更新此数据。\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805594274-55e34412-4aee-4320-9ec2-227c9de76049.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=ue45bda5c&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620632729717-b861de46-4689-4170-9f90-e2a387ace2bc.png&#x26;originHeight=1854&#x26;originWidth=3094&#x26;originalType=binary&#x26;size=399658&#x26;status=done&#x26;style=none&#x26;taskId=ubb477c5d-be9d-442c-b7f9-d283366a802\" alt=\"1620632729717-b861de46-4689-4170-9f90-e2a387ace2bc.png\">\n值得一提的是，虽然分块机制肯定能降低 CPU 运算次数，但是数据的存放位置还是很有讲究的，比如开发者将一个可以属于 Scene 级别的着色器变量放在了 Renderer 里面，本来渲染场景的时候运算一次即可，但是现在每个 Renderer 都将重复计算，那么将会浪费 scene * camera * renderer 次运算。</p>\n<h3 id=\"gpu-分块上传\" style=\"position:relative;\"><a href=\"#gpu-%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0\" aria-label=\"gpu 分块上传 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GPU 分块上传</h3>\n<p>同理的，如果不进行分块，在最后上传 GPU 的时候，一般默认上传所有着色器数据。</p>\n<p>受益于分块机制，我们可以根据这四大块内容有没有发生变化，然后再选择是否上传这一块的数据，从而减少 GPU 通信，如：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805610356-21b25a77-3732-4dab-9be8-14cc71ae9ef1.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u3385c414&#x26;margin=%5Bobject%20Object%5D&#x26;name=1611973870038-a0a54105-445c-4a02-9baf-d5a31dd1f3a9.png&#x26;originHeight=82&#x26;originWidth=512&#x26;originalType=binary&#x26;size=63794&#x26;status=done&#x26;style=none&#x26;taskId=u6b12be56-9577-4ba9-85dd-038987e07b7\" alt=\"1611973870038-a0a54105-445c-4a02-9baf-d5a31dd1f3a9.png\">\n如上图所示，如果当前渲染管线所属相机没有发生变化，那么属于相机这一整块的着色器数据是不会上传的。当然即使上传了这一块数据，我们也在最底层上传着色器数据的时候进行了判重处理，如果与着色器的缓存值重复，则不上传这一个着色器数据到 GPU：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805642236-bd4ec069-d1c2-4588-8bd9-2070c97a1f83.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=ufb1e4f31&#x26;margin=%5Bobject%20Object%5D&#x26;name=1611973530845-f6b6d878-1c22-4e45-aec0-d8ea1eb2b50c.png&#x26;originHeight=121&#x26;originWidth=482&#x26;originalType=binary&#x26;size=65128&#x26;status=done&#x26;style=none&#x26;taskId=ub91177f2-942f-4b3f-8314-95415a83165\" alt=\"1611973530845-f6b6d878-1c22-4e45-aec0-d8ea1eb2b50c.png\"></p>\n<h3 id=\"预分析着色器\" style=\"position:relative;\"><a href=\"#%E9%A2%84%E5%88%86%E6%9E%90%E7%9D%80%E8%89%B2%E5%99%A8\" aria-label=\"预分析着色器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预分析着色器</h3>\n<p>上面说到，我们可以通过 <a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/#uniform\">Uniform</a> 方式上传着色器数据，但是不同的着色器数据类型，需要调用不同的 API：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805661186-7b08f841-f11f-40b4-a6ea-7461cbcc35ff.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=ub0504043&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620466736862-f00c1da3-06f6-45d8-a6db-6fc02a642a04.png&#x26;originHeight=2150&#x26;originWidth=2726&#x26;originalType=binary&#x26;size=1133825&#x26;status=done&#x26;style=none&#x26;taskId=ue517fa27-dc3b-4d18-99d1-c4f3f19872c\" alt=\"1620466736862-f00c1da3-06f6-45d8-a6db-6fc02a642a04.png\">\n如果我们在上传着色器数据的时候，再根据着色器数据类型调用相应 API，那么就免不了调用 switch、for 等循环查找的语法，而在频繁调用的接口中，使用这些方法将是非常耗时的。\n因此，引擎不仅提供了自动创建 <strong>ShaderProgram</strong> 上下文的功能，而且在创建的时候记录了一些着色器在运行时必要的条件，后续引擎在更新着色器数据的时候，只需要调用保存的钩子即可，省去了运行时查找的耗时。</p>\n<h3 id=\"优化数据上传方式\" style=\"position:relative;\"><a href=\"#%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0%E6%96%B9%E5%BC%8F\" aria-label=\"优化数据上传方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>优化数据上传方式</h3>\n<p>着色器数据上传方式有多种，比如着色器中有一个浮点数组变量 <code>uniform float test[4]</code> , 那用户既可以分 4 次分别上传数组相应元素，即 <code>uniform1f(test[0],v0)</code>、<code>uniform1f(test[1],v1)</code>、<code>uniform1f(test[2],v2)</code>、<code>uniform1f(test[3],v3)</code> ，也可以 1 次就上传完整数组，即 <code>uniform4f(test[0],v0,v1,v2,v3)</code>或者<code>uniform4fv(test[0],[v0,v1,v2,v3])</code>。</p>\n<p>在上述例子中，虽然有多种上传着色器方式，但是明显 1 次上传性能会更高，因此引擎<strong>取消了数组元素独立上传和结构体数组的上传</strong>。这意味着，如果着色器中有数组变量，用户只能批量上传整个着色器数组，而不能一个一个地上传；同理，如果使用结构体数组，因为着色器无法批量上传结构体，引擎又不支持独立上传，所以需要用户将结构体数组拆分成多个数组。</p>\n<h3 id=\"预绑定纹理单元\" style=\"position:relative;\"><a href=\"#%E9%A2%84%E7%BB%91%E5%AE%9A%E7%BA%B9%E7%90%86%E5%8D%95%E5%85%83\" aria-label=\"预绑定纹理单元 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预绑定纹理单元</h3>\n<p>对于<strong>纹理单元</strong>的处理，引擎在预分析着色器数据的时候就已经对着色器里面的所有采样器变量预绑定了纹理单元， 在后续更新着色器纹理时，只需要调用激活纹理单元的接口即可，减少了绑定纹理单元的操作。\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805681937-b27c4eb4-9669-4feb-8429-8b55f1c8a624.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u92b65f35&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620484477610-a2128e49-c5a4-4b88-a5a1-2942ffe1572a.png&#x26;originHeight=902&#x26;originWidth=2956&#x26;originalType=binary&#x26;size=380508&#x26;status=done&#x26;style=none&#x26;taskId=u9c2af588-277f-4969-98ea-9d791c41efb\" alt=\"1620484477610-a2128e49-c5a4-4b88-a5a1-2942ffe1572a.png\"></p>\n<h3 id=\"数字索引着色器数据\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E5%AD%97%E7%B4%A2%E5%BC%95%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%B0%E6%8D%AE\" aria-label=\"数字索引着色器数据 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数字索引着色器数据</h3>\n<p>在更新着色器数据的时候，引擎肯定需要频繁查询大量着色器相关的数据，比如为了上传着色器的某一个 uniform 变量 ，那我们需要根据这个 uniform 变量的名字在 CPU 中找到这个数据，而这个查询过程中如果用字符串会很慢，我们用了数字索引来提升性能。\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805699125-b43c905c-abe8-4e50-890f-876f27b9d803.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u7318c5b5&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620630775285-47d2eecc-4328-4931-9069-09574e345498.png&#x26;originHeight=456&#x26;originWidth=1656&#x26;originalType=binary&#x26;size=360150&#x26;status=done&#x26;style=none&#x26;taskId=u35c79471-60c6-4d5b-ba0f-f9e8664bd6e\" alt=\"1620630775285-47d2eecc-4328-4931-9069-09574e345498.png\">\n如上图所示，如果涉及到数据的频繁查询，建议尽量使用数字索引；经过实践验证，在 JS 对象中查找元素，数字索引会比字符串索引快很多，而且样本量越大，字符串越复杂，速度相差就越明显。如下<a href=\"https://codepen.io/zhuxudong/pen/ZEeEyNV\">案例</a>，对比了从 1000 个样本中分别使用数字索引和字符串索引，速度相差 10 倍以上：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805709373-7323231b-7501-4e13-b14c-ca4d5cd10052.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=u9a2d6347&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620725995655-c51876c1-4bee-4bdf-9f46-b2d38f2beba1.png&#x26;originHeight=152&#x26;originWidth=750&#x26;originalType=binary&#x26;size=45853&#x26;status=done&#x26;style=none&#x26;taskId=u5be8c152-fcb7-4052-9ae3-f18d7e0e4ec\" alt=\"1620725995655-c51876c1-4bee-4bdf-9f46-b2d38f2beba1.png\"></p>\n<h2 id=\"更新渲染状态\" style=\"position:relative;\"><a href=\"#%E6%9B%B4%E6%96%B0%E6%B8%B2%E6%9F%93%E7%8A%B6%E6%80%81\" aria-label=\"更新渲染状态 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新渲染状态</h2>\n<p>第五个阶段是更新渲染状态。</p>\n<p>在图形渲染管线中，存在着众多平级的渲染状态，比如深度测试、颜色混合模式、模版测试、 背面剔除。因此引擎设计将众多的渲染状态分为了<strong>渲染状态</strong>（BlendState）<strong>、深度状态</strong>（DepthState）<strong>、模版状态</strong>（StencilState）<strong>、光栅化状态</strong>（RasterState）。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805729578-1aee2cd9-455b-4acf-9469-02b5ebf50cbd.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;height=233&#x26;id=u2b8cf636&#x26;margin=%5Bobject%20Object%5D&#x26;name=1620467710622-3c51e37d-2c4b-4bb4-a454-2e046abd6aac.png&#x26;originHeight=466&#x26;originWidth=516&#x26;originalType=binary&#x26;size=25084&#x26;status=done&#x26;style=none&#x26;taskId=uad396415-3658-4b28-8161-70e4e7bf5b9&#x26;width=258\" alt=\"1620467710622-3c51e37d-2c4b-4bb4-a454-2e046abd6aac.png\"></p>\n<ul>\n<li><strong>判断重复</strong>。渲染状态的更新需要与 GPU 通信，比较耗性能，因此在改变渲染状态(RenderState)时需要进行判重，如果与缓存值重复，则不改变此渲染状态。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805751896-555e8cf4-7233-4aee-bbc4-dfc53fa5498f.png#clientId=u59b6cee5-37a0-4&#x26;from=ui&#x26;id=ufd7aef6a&#x26;margin=%5Bobject%20Object%5D&#x26;name=1611973640681-bf01675d-406e-4d13-bc7a-75c1094b9f60.png&#x26;originHeight=236&#x26;originWidth=547&#x26;originalType=binary&#x26;size=156411&#x26;status=done&#x26;style=none&#x26;taskId=u41437338-4b24-4da5-b9b0-7f589eb8552\" alt=\"1611973640681-bf01675d-406e-4d13-bc7a-75c1094b9f60.png\"></p>\n<ul>\n<li><strong>开关过滤</strong>。渲染状态是有层级关系的，运行时采用 **总开关  + 子状态配置 **的优先级，来决定是否进行 GPU 通信。比如在深度状态相关的配置中，总开关为开启/关闭深度测试，状态配置为深度写入、深度比较函数，那么只有开启深度开关这个总开关后，深度写入这些状态配置才会生效，才会更新 GPU 的渲染状态。</li>\n</ul>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>针对渲染管线的优化手段还有很多，一般情况下，Oasis 引擎的<a href=\"https://oasisengine.cn/0.3/api/classes/core.basicrenderpipeline.html\"><strong>通用渲染管线</strong></a>已经能够满足大部分开发者的需求，如果存在特殊的渲染需求，可以通过 <a href=\"https://oasisengine.cn/#/\"><strong>Oasis 引擎官网</strong></a>了解更多引擎相关设计。希望这篇文章能够通过引擎的部分设计思路和优化手段，带给大家一点帮助。\n​</p>\n<h2 id=\"最后\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%90%8E\" aria-label=\"最后 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最后</h2>\n<p>欢迎大家 star 我们的<a href=\"https://github.com/oasis-engine/engine\"> github 仓库</a>，也可以随时关注我们的后续<a href=\"https://github.com/orgs/oasis-engine/projects\">规划</a>，也可以在 <a href=\"https://github.com/oasis-engine/engine/issues\">issues</a> 里给我们提需求和问题。开发者可以加入到我们的钉钉群里来跟我们吐槽和探讨一些问题：\n<img src=\"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620806319325-f2c9d51a-2a76-4c79-9f3e-14f579e3b18c.png#clientId=u2c4a189e-b433-4&#x26;from=ui&#x26;height=743&#x26;id=u7b5848cc&#x26;margin=%5Bobject%20Object%5D&#x26;name=1617693093025-5653062d-8bfc-4f3c-b8ed-f1085c055114.png&#x26;originHeight=1485&#x26;originWidth=1125&#x26;originalType=binary&#x26;size=281805&#x26;status=done&#x26;style=none&#x26;taskId=u01345d87-dfae-41ed-8e48-66878eecce4&#x26;width=563\" alt=\"1617693093025-5653062d-8bfc-4f3c-b8ed-f1085c055114.png\">\n**无论你是渲染、TA 、Web 前端或是游戏方向，只要你和我们一样，渴望实现心中的绿洲，欢迎投递简历到 **<a href=\"mailto:chenmo.gl@antgroup.com\">chenmo.gl@antgroup.com</a>。</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"作者："},{"type":"element","tagName":"a","properties":{"href":"https://github.com/zhuxudong"},"children":[{"type":"text","value":"慎思"}]},{"type":"text","value":"\n​"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"引言","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E5%BC%95%E8%A8%80","ariaLabel":"引言 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"引言"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通常而言，在图形学中，我们所说的“"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"渲染"}]},{"type":"text","value":"”(Rendering)，指在给定虚拟相机、三维物体、光源等条件下，在屏幕等终端生成或绘制一幅二维图像的过程。\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805160286-65a9d3fc-89c8-4a4b-b5c8-80124e540c1c.png#clientId=u59b6cee5-37a0-4&from=ui&id=u95b91ca9&margin=%5Bobject%20Object%5D&name=1620373084300-b77b40e4-546e-4808-a9ad-e70610dd1a86.png&originHeight=582&originWidth=2146&originalType=binary&size=599231&status=done&style=none&taskId=u864c50bf-bfa9-4ad6-8f61-c8a66b542cb","alt":"1620373084300-b77b40e4-546e-4808-a9ad-e70610dd1a86.png"},"children":[]},{"type":"text","value":"\n如下图所示，渲染管线一般包含了三大阶段。其中"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"应用程序阶段"}]},{"type":"text","value":"（Application）可以理解为数据准备阶段，Oasis 引擎在这里准备了着色器编译、视锥体裁剪、渲染队列排序、着色器数据等初始化工作；"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"几何体阶段"}]},{"type":"text","value":"（Geometry Processing）将上述数据经过顶点着色器、投影变换、裁剪、屏幕映射一系列处理后输出到屏幕坐标系上；"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"光栅化阶段"}]},{"type":"text","value":"（Rasterizer）将上一个阶段的顶点栅格化成一个个片元，然后经过片元着色器、颜色融合等操作，给每一个像素点描绘出相应的颜色。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805180283-d2a27833-67a2-4a4b-9ebc-13bf28b2cfc3.png#clientId=u59b6cee5-37a0-4&from=ui&id=uc2132e97&margin=%5Bobject%20Object%5D&name=1620451156989-1463a5a7-ce6c-4329-beaf-f8c974cfd30c.png&originHeight=329&originWidth=1030&originalType=binary&size=34407&status=done&style=none&taskId=u58a212b1-6923-4fff-bccb-8eccf677134","alt":"1620451156989-1463a5a7-ce6c-4329-beaf-f8c974cfd30c.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在动态场景中，相机、三维物体、光源等对象都是在不断变化的，也就是我们每一帧都需要执行一遍渲染管线。而一般画面度流畅的最低要求为 FPS > 30，即走一遍渲染管线的时间需要少于 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"33"}]},{"type":"text","value":"（1000 / 30）毫秒。Oasis 引擎在 0.3 里程碑中，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"借助"}]},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/#/0.3/manual/zh-cn/resource/custom-material"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"材质系统"}]}]},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"对渲染管线进行了全面重构，"}]},{"type":"text","value":" 通过 "},{"type":"element","tagName":"a","properties":{"href":"https://oasis-engine.github.io/0.3/playground/#/skeleton-animation"},"children":[{"type":"text","value":"骨骼动画"}]},{"type":"text","value":" demo （如下图所示，面数 728300，drawcall 50 次，不采用 Instance 合批等技术）的测试，在近 100 万面的浏览器 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"6 倍降频"}]},{"type":"text","value":"渲染中，跟渲染相关的 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"render"}]},{"type":"text","value":" 方法只占用了 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"900 微秒"}]},{"type":"text","value":"（ 0.2 版本渲染相同的场景 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"render"}]},{"type":"text","value":" 方法需要耗时 10 ms）！\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805285242-b6d92cac-1b5b-4490-a961-19e69f399514.png#clientId=u59b6cee5-37a0-4&from=ui&id=u1fdb997c&margin=%5Bobject%20Object%5D&name=1620487677757-b4061d96-bf05-486f-a9e0-efbafef02cf5.png&originHeight=1402&originWidth=3006&originalType=binary&size=1330669&status=done&style=none&taskId=u7ff8d62d-27b0-4df0-948b-887405a0169","alt":"1620487677757-b4061d96-bf05-486f-a9e0-efbafef02cf5.png"},"children":[]},{"type":"text","value":"\nMacBook Pro，2.7GHz 四核 Intel Core i7，Intel Iris Plus Graphics 655 1536 MB，Google Chrome 90.0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本文将重点针对"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"应用程序阶段，"}]},{"type":"text","value":"从数据结构、语法、架构设计等角度分析 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Oasis 引擎的渲染管线是如何设计和优化的。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805304333-57bc870a-d24e-46e9-a94d-848acd7382b2.png#clientId=u59b6cee5-37a0-4&from=ui&id=u03d174c2&margin=%5Bobject%20Object%5D&name=1620617353816-57c02c68-8c20-44e8-ac75-6579c9d0c00f.png&originHeight=1246&originWidth=4426&originalType=binary&size=331167&status=done&style=none&taskId=u59ffe783-279c-450c-ade6-471af79eca2","alt":"1620617353816-57c02c68-8c20-44e8-ac75-6579c9d0c00f.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"视锥体剔除","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E8%A7%86%E9%94%A5%E4%BD%93%E5%89%94%E9%99%A4","ariaLabel":"视锥体剔除 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"视锥体剔除"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第一个阶段是视锥体剔除。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假如场景中所有激活的物体都会进入接下去的渲染管线，但是有些物体其实是在相机的视锥体范围之外的，那么这些视锥体之外物体的渲染其实是多余的，尤其是面数比较多的模型，会大大浪费性能。我们把在渲染管线开始之前，将相机视锥体范围之外的物体进行排除的这种操作，称为视锥体剔除，如 "},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/0.3/playground/#/renderer-cull"},"children":[{"type":"text","value":"视锥体剔除 Demo"}]},{"type":"text","value":"。\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805412000-66fdbcab-7909-467b-ad69-babb3c9f16d0.png#clientId=u59b6cee5-37a0-4&from=ui&id=u16ec8f87&margin=%5Bobject%20Object%5D&name=1620290443769-64f2e7f0-705d-42df-84ba-67f99ac44cc9.png&originHeight=658&originWidth=1036&originalType=binary&size=136535&status=done&style=none&taskId=u2de1a11f-a447-4095-b48c-a063a766eee","alt":"1620290443769-64f2e7f0-705d-42df-84ba-67f99ac44cc9.png"},"children":[]},{"type":"text","value":"\nOasis 引擎底层首先会利用脏标记检测"},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/0.3/api/classes/math.boundingfrustum.html"},"children":[{"type":"text","value":"视锥体"}]},{"type":"text","value":"是否发生变化，从而更新"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"视锥体"}]},{"type":"text","value":"；\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805437228-fc74dbbf-72ec-4781-832c-ae08e2918b5a.png#clientId=u59b6cee5-37a0-4&from=ui&id=u230a326d&margin=%5Bobject%20Object%5D&name=1620457358641-33cf5c35-64ab-488f-8a39-cb5595449fcb.png&originHeight=304&originWidth=2262&originalType=binary&size=454609&status=done&style=none&taskId=uf6bd8a8f-d1e6-475b-8aee-42298dfb89d","alt":"1620457358641-33cf5c35-64ab-488f-8a39-cb5595449fcb.png"},"children":[]},{"type":"text","value":"然后将视锥体与物体的"},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/0.3/api/classes/math.boundingbox.html"},"children":[{"type":"text","value":" AABB 包围盒"}]},{"type":"text","value":"进行碰撞检测；同理，物体的包围盒是否发生变化也采用了脏标记检测：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805458961-2e791f4d-941e-4671-ad8d-03877b03bfe3.png#clientId=u59b6cee5-37a0-4&from=ui&id=u23200720&margin=%5Bobject%20Object%5D&name=1620457327131-d2981d0c-560f-49aa-9b08-5893125f86f0.png&originHeight=610&originWidth=1076&originalType=binary&size=394253&status=done&style=none&taskId=udaa8517a-df65-4943-9e89-61b6061f1fb","alt":"1620457327131-d2981d0c-560f-49aa-9b08-5893125f86f0.png"},"children":[]},{"type":"text","value":"\n顺便一提，包围盒的更新使用了 "},{"type":"element","tagName":"a","properties":{"href":"https://zeux.io/2010/10/17/aabb-from-obb-with-component-wise-abs/"},"children":[{"type":"text","value":"component-wise"}]},{"type":"text","value":" 算法，只需要对两个矢量运算即可得到包围盒的世界坐标系：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805473200-cee41bc2-513b-498c-b2bc-47fedee897b3.png#clientId=u59b6cee5-37a0-4&from=ui&id=u0d86097a&margin=%5Bobject%20Object%5D&name=1620620113756-c054d4dc-f614-41fa-a3e0-a9e91a15c416.png&originHeight=1274&originWidth=1734&originalType=binary&size=1618177&status=done&style=none&taskId=uc1dd94b0-658d-4475-ab09-a546b699244","alt":"1620620113756-c054d4dc-f614-41fa-a3e0-a9e91a15c416.png"},"children":[]},{"type":"text","value":"\n最后，只有视锥体"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"包含"}]},{"type":"text","value":"或者"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"交叉"}]},{"type":"text","value":"物体包围盒的物体才会进入渲染管线，减少了后续管线压力，提升了性能。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"渲染队列排序","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%B8%B2%E6%9F%93%E9%98%9F%E5%88%97%E6%8E%92%E5%BA%8F","ariaLabel":"渲染队列排序 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"渲染队列排序"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第二个阶段是渲染队列排序。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在渲染管线中，物体的默认渲染队列是无序的，即物体与相机的距离远近，透明度等不同渲染状态因素都不受控制，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"渲染效果的正确性、管线性能"}]},{"type":"text","value":"都会受到影响，因此引擎将渲染队列分成了不透明（Opaque）、透明度测试（AlphaTest）、透明（Transparent） 三种队列。\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805537862-f0e7a05a-0adf-4d4f-bebd-2e57ceb81c84.png#clientId=u59b6cee5-37a0-4&from=ui&id=u7b3a88a6&margin=%5Bobject%20Object%5D&name=1620614678257-9e7b1846-d876-4ff4-95a6-bfebd8767884.png&originHeight=1058&originWidth=4692&originalType=binary&size=437748&status=done&style=none&taskId=ub3827878-2e89-4ad2-a7fb-382981a0e56","alt":"1620614678257-9e7b1846-d876-4ff4-95a6-bfebd8767884.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"不透明队列从近到远排序"}]},{"type":"text","value":"。我们一般会对非透明物体进行从近到远排序，这是因为当我们开启"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"深度测试"}]},{"type":"text","value":"后，深度测试"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"失败"}]},{"type":"text","value":"的片元将不进行颜色融合，支持** early-Z** 的 GPU 还会直接跳过片元着色器；又因为深度测试失败的默认配置为 z1 > z2 ，即距离较远的片元会深度测试失败，所以我们对非透明物体进行从近到远排序，可以最大程度地剔除后续深度测试失败的片元，达到性能优化；值得一提的是，有些 GPU 架构比如 PowerVR 支持"},{"type":"element","tagName":"a","properties":{"href":"http://cdn.imgtec.com/sdk-documentation/PowerVR+Series5.Architecture+Guide+for+Developers.pdf"},"children":[{"type":"text","value":" HSR"}]},{"type":"text","value":"（Hidden Surface Removal）技术，引擎利用此技术能够不排序也能实现 early-Z 剔除效果，因此从近到远排序并不是必然的选择。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"透明队列从远到近排序"}]},{"type":"text","value":"。此排序是为了保障渲染效果的正确性，因为通过色彩叠加原理可知，两种颜色混合的最终结果是受先后顺序影响的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"排序算法优化"}]},{"type":"text","value":"。Oasis 引擎使用了更加高效的排序算法。JS 的内置方法 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Array.sort"}]},{"type":"text","value":" 也能实现排序，但是源码里面有太多通用逻辑，会影响性能，感兴趣的可以在这个 "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/oasis-engine/engine/issues/36"},"children":[{"type":"text","value":"Oasis Issue"}]},{"type":"text","value":" 里面进行讨论。顺便一提，除了 Array.sort，JS 的很多内置方法都是为了通用性考虑，如果追求极致性能，需要针对引擎做特殊优化，如 **Array.forEach **这个数组内置方法是用来实现遍历的，但是源码里面有太多判断数组相关的逻辑，还有传回调堆栈等非引擎需要的功能，因此引擎内部尽量使用 for 循环来实现遍历会更加的高效，特别是帧级别的调用。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"编译着色器","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E7%BC%96%E8%AF%91%E7%9D%80%E8%89%B2%E5%99%A8","ariaLabel":"编译着色器 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"编译着色器"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第三个阶段是编译着色器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/"},"children":[{"type":"text","value":"着色器"}]},{"type":"text","value":"（Shader）包括"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"顶点着色器"}]},{"type":"text","value":"和"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"片元着色器"}]},{"type":"text","value":"，是硬件渲染管线中的可编程模块，我们可以通过编写着色器代码，连接 CPU 和 GPU，控制最后的顶点位置，像素颜色等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编译着色器里的一个核心概念是"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"宏"}]},{"type":"text","value":"。我们在写着色器时，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#ifdef"}]},{"type":"text","value":" 等宏命令可以选择是否编译这部分 Shader 代码，除了是否定义了这个宏之外，剩余的 Shader 的代码是完全一样的。我们把某个是否需要定义的宏称为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"宏开关"}]},{"type":"text","value":"；不同的宏开关组合在引擎中称为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"宏集合"}]},{"type":"text","value":"；而根据宏集合生成的不同 Shader，称为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"着色器变种"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"自动编译着色器变种"}]},{"type":"text","value":"。通常情况下，开发者只需要操作宏开关即可，引擎在运行时会自动根据宏集合是否发生变化来决定是否进行重新编译着色器。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"预编译着色器变种"}]},{"type":"text","value":"。如果对于运行时的流畅度要求较高，我们也可以手动调用引擎的 "},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/0.3/api/classes/core.shader.html#compilevariant"},"children":[{"type":"text","value":"Shader.compileVariant"}]},{"type":"text","value":" 方法来进行"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"预编译"}]},{"type":"text","value":"，那么渲染运行时就无需再编译，不会造成卡顿。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"位运算"}]},{"type":"text","value":"：因为宏集合中的每一个宏开关其实是一个字符串，而各种宏开关又存在着增删改查等需求，那么如何高效地对字符串组合进行运算，就可以用到"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"位运算"}]},{"type":"text","value":"这个小技巧：我们把每一个宏开关，比如 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#ifdef test"}]},{"type":"text","value":"，当作字节里面的一个“位”（bit），0 表示关闭该宏，1 表示开启该宏，那么一个 32 位的 Int 类型数字就可以表示 32 个宏开关；使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"｜="}]},{"type":"text","value":" 就可以实现开启宏，使用 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"& ～"}]},{"type":"text","value":"就可以实现关闭宏；受益于位操作，判断两个宏集合是否变化，只需要判断两个数字是否相等即可。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"更新着色器数据","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%9B%B4%E6%96%B0%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%B0%E6%8D%AE","ariaLabel":"更新着色器数据 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"更新着色器数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第四个阶段是更新着色器数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"与 JS、C++ 等编程语言一样，着色器使用 "},{"type":"element","tagName":"a","properties":{"href":"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/#glsl"},"children":[{"type":"text","value":"GLSL"}]},{"type":"text","value":" 语言，也有变量、函数等概念，不同的是着色器存在于 GPU，我们可以通过 "},{"type":"element","tagName":"a","properties":{"href":"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/#uniform"},"children":[{"type":"text","value":"Uniform"}]},{"type":"text","value":" 方式上传着色器数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基于着色器中的数据缓存机制，当数据没有发生变化时，可以不用每一帧都上传数据，由此，可以联想到一个优化手段，那就是"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"分块更新/上传"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805558367-b90961f7-4452-4c83-9217-529ec114b986.png#clientId=u59b6cee5-37a0-4&from=ui&height=346&id=u32192579&margin=%5Bobject%20Object%5D&name=1620312672843-86bca06d-d3db-44ff-97ee-a56fbc9c7864.png&originHeight=692&originWidth=1166&originalType=binary&size=89127&status=done&style=none&taskId=u479d3f8c-234c-4cd0-95f3-86287d91740&width=583","alt":"1620312672843-86bca06d-d3db-44ff-97ee-a56fbc9c7864.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如上图所示，Oasis 引擎设计将着色器数据 "},{"type":"element","tagName":"a","properties":{"href":"https://oasis-engine.github.io/0.3/api/classes/core.shaderdata.html"},"children":[{"type":"text","value":"ShaderData"}]},{"type":"text","value":" 分别保存在 "},{"type":"element","tagName":"a","properties":{"href":"https://oasis-engine.github.io/0.3/api/classes/core.scene.html"},"children":[{"type":"text","value":"Scene"}]},{"type":"text","value":"、"},{"type":"element","tagName":"a","properties":{"href":"https://oasis-engine.github.io/0.3/api/classes/core.camera.html"},"children":[{"type":"text","value":"Camera"}]},{"type":"text","value":"、"},{"type":"element","tagName":"a","properties":{"href":"https://oasis-engine.github.io/0.3/api/classes/core.renderer.html"},"children":[{"type":"text","value":"Renderer"}]},{"type":"text","value":"、"},{"type":"element","tagName":"a","properties":{"href":"https://oasis-engine.github.io/0.3/api/classes/core.material.html"},"children":[{"type":"text","value":"Material"}]},{"type":"text","value":" 四大块中。进行分块后，引擎可以在 CPU 分块更新着色器数据，最后分块上传到 GPU，期间还存在一些细小的优化点，接下来分别展开讨论。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"cpu-分块更新","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#cpu-%E5%88%86%E5%9D%97%E6%9B%B4%E6%96%B0","ariaLabel":"cpu 分块更新 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"CPU 分块更新"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在很多设计中，着色器相关的数据都存放在了材质（Material）中，也就是说所有的着色器数据都在渲染器更新的时候进行了更新，即使是那些不需要更新的数据，复杂度为 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"O(Scene"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Camera"}]},{"type":"text","value":"Renderer)，"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805585108-7f434e5b-2318-4444-8ec0-9f7e08881a8c.png#clientId=u59b6cee5-37a0-4&from=ui&id=ue60f0047&margin=%5Bobject%20Object%5D&name=1620617666061-efb011d4-10c6-4900-b138-b850821d5636.png&originHeight=1466&originWidth=2968&originalType=binary&size=310236&status=done&style=none&taskId=u57739e2b-0ed3-4a1e-aae4-0d6937373c2","alt":"1620617666061-efb011d4-10c6-4900-b138-b850821d5636.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"而进行了分块之后，更新着色器数据的逻辑就分别放在了场景更新、相机更新、渲染器更新、材质更新里面，复杂度变为 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"O(Scene+Camera+Renderer)"}]},{"type":"text","value":"，即相应的数据只在相应的钩子里面进行运算；比如着色器中有一个变量，只跟场景相关，那么分块后，只有场景切换的时候，才会更新此数据。\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805594274-55e34412-4aee-4320-9ec2-227c9de76049.png#clientId=u59b6cee5-37a0-4&from=ui&id=ue45bda5c&margin=%5Bobject%20Object%5D&name=1620632729717-b861de46-4689-4170-9f90-e2a387ace2bc.png&originHeight=1854&originWidth=3094&originalType=binary&size=399658&status=done&style=none&taskId=ubb477c5d-be9d-442c-b7f9-d283366a802","alt":"1620632729717-b861de46-4689-4170-9f90-e2a387ace2bc.png"},"children":[]},{"type":"text","value":"\n值得一提的是，虽然分块机制肯定能降低 CPU 运算次数，但是数据的存放位置还是很有讲究的，比如开发者将一个可以属于 Scene 级别的着色器变量放在了 Renderer 里面，本来渲染场景的时候运算一次即可，但是现在每个 Renderer 都将重复计算，那么将会浪费 scene * camera * renderer 次运算。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"gpu-分块上传","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#gpu-%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0","ariaLabel":"gpu 分块上传 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"GPU 分块上传"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"同理的，如果不进行分块，在最后上传 GPU 的时候，一般默认上传所有着色器数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"受益于分块机制，我们可以根据这四大块内容有没有发生变化，然后再选择是否上传这一块的数据，从而减少 GPU 通信，如：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805610356-21b25a77-3732-4dab-9be8-14cc71ae9ef1.png#clientId=u59b6cee5-37a0-4&from=ui&id=u3385c414&margin=%5Bobject%20Object%5D&name=1611973870038-a0a54105-445c-4a02-9baf-d5a31dd1f3a9.png&originHeight=82&originWidth=512&originalType=binary&size=63794&status=done&style=none&taskId=u6b12be56-9577-4ba9-85dd-038987e07b7","alt":"1611973870038-a0a54105-445c-4a02-9baf-d5a31dd1f3a9.png"},"children":[]},{"type":"text","value":"\n如上图所示，如果当前渲染管线所属相机没有发生变化，那么属于相机这一整块的着色器数据是不会上传的。当然即使上传了这一块数据，我们也在最底层上传着色器数据的时候进行了判重处理，如果与着色器的缓存值重复，则不上传这一个着色器数据到 GPU：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805642236-bd4ec069-d1c2-4588-8bd9-2070c97a1f83.png#clientId=u59b6cee5-37a0-4&from=ui&id=ufb1e4f31&margin=%5Bobject%20Object%5D&name=1611973530845-f6b6d878-1c22-4e45-aec0-d8ea1eb2b50c.png&originHeight=121&originWidth=482&originalType=binary&size=65128&status=done&style=none&taskId=ub91177f2-942f-4b3f-8314-95415a83165","alt":"1611973530845-f6b6d878-1c22-4e45-aec0-d8ea1eb2b50c.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"预分析着色器","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E9%A2%84%E5%88%86%E6%9E%90%E7%9D%80%E8%89%B2%E5%99%A8","ariaLabel":"预分析着色器 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"预分析着色器"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上面说到，我们可以通过 "},{"type":"element","tagName":"a","properties":{"href":"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/05%20Shaders/#uniform"},"children":[{"type":"text","value":"Uniform"}]},{"type":"text","value":" 方式上传着色器数据，但是不同的着色器数据类型，需要调用不同的 API：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805661186-7b08f841-f11f-40b4-a6ea-7461cbcc35ff.png#clientId=u59b6cee5-37a0-4&from=ui&id=ub0504043&margin=%5Bobject%20Object%5D&name=1620466736862-f00c1da3-06f6-45d8-a6db-6fc02a642a04.png&originHeight=2150&originWidth=2726&originalType=binary&size=1133825&status=done&style=none&taskId=ue517fa27-dc3b-4d18-99d1-c4f3f19872c","alt":"1620466736862-f00c1da3-06f6-45d8-a6db-6fc02a642a04.png"},"children":[]},{"type":"text","value":"\n如果我们在上传着色器数据的时候，再根据着色器数据类型调用相应 API，那么就免不了调用 switch、for 等循环查找的语法，而在频繁调用的接口中，使用这些方法将是非常耗时的。\n因此，引擎不仅提供了自动创建 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ShaderProgram"}]},{"type":"text","value":" 上下文的功能，而且在创建的时候记录了一些着色器在运行时必要的条件，后续引擎在更新着色器数据的时候，只需要调用保存的钩子即可，省去了运行时查找的耗时。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"优化数据上传方式","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0%E6%96%B9%E5%BC%8F","ariaLabel":"优化数据上传方式 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"优化数据上传方式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"着色器数据上传方式有多种，比如着色器中有一个浮点数组变量 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform float test[4]"}]},{"type":"text","value":" , 那用户既可以分 4 次分别上传数组相应元素，即 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform1f(test[0],v0)"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform1f(test[1],v1)"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform1f(test[2],v2)"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform1f(test[3],v3)"}]},{"type":"text","value":" ，也可以 1 次就上传完整数组，即 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform4f(test[0],v0,v1,v2,v3)"}]},{"type":"text","value":"或者"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"uniform4fv(test[0],[v0,v1,v2,v3])"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在上述例子中，虽然有多种上传着色器方式，但是明显 1 次上传性能会更高，因此引擎"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"取消了数组元素独立上传和结构体数组的上传"}]},{"type":"text","value":"。这意味着，如果着色器中有数组变量，用户只能批量上传整个着色器数组，而不能一个一个地上传；同理，如果使用结构体数组，因为着色器无法批量上传结构体，引擎又不支持独立上传，所以需要用户将结构体数组拆分成多个数组。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"预绑定纹理单元","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E9%A2%84%E7%BB%91%E5%AE%9A%E7%BA%B9%E7%90%86%E5%8D%95%E5%85%83","ariaLabel":"预绑定纹理单元 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"预绑定纹理单元"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"纹理单元"}]},{"type":"text","value":"的处理，引擎在预分析着色器数据的时候就已经对着色器里面的所有采样器变量预绑定了纹理单元， 在后续更新着色器纹理时，只需要调用激活纹理单元的接口即可，减少了绑定纹理单元的操作。\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805681937-b27c4eb4-9669-4feb-8429-8b55f1c8a624.png#clientId=u59b6cee5-37a0-4&from=ui&id=u92b65f35&margin=%5Bobject%20Object%5D&name=1620484477610-a2128e49-c5a4-4b88-a5a1-2942ffe1572a.png&originHeight=902&originWidth=2956&originalType=binary&size=380508&status=done&style=none&taskId=u9c2af588-277f-4969-98ea-9d791c41efb","alt":"1620484477610-a2128e49-c5a4-4b88-a5a1-2942ffe1572a.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"数字索引着色器数据","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%95%B0%E5%AD%97%E7%B4%A2%E5%BC%95%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%B0%E6%8D%AE","ariaLabel":"数字索引着色器数据 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"数字索引着色器数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在更新着色器数据的时候，引擎肯定需要频繁查询大量着色器相关的数据，比如为了上传着色器的某一个 uniform 变量 ，那我们需要根据这个 uniform 变量的名字在 CPU 中找到这个数据，而这个查询过程中如果用字符串会很慢，我们用了数字索引来提升性能。\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805699125-b43c905c-abe8-4e50-890f-876f27b9d803.png#clientId=u59b6cee5-37a0-4&from=ui&id=u7318c5b5&margin=%5Bobject%20Object%5D&name=1620630775285-47d2eecc-4328-4931-9069-09574e345498.png&originHeight=456&originWidth=1656&originalType=binary&size=360150&status=done&style=none&taskId=u35c79471-60c6-4d5b-ba0f-f9e8664bd6e","alt":"1620630775285-47d2eecc-4328-4931-9069-09574e345498.png"},"children":[]},{"type":"text","value":"\n如上图所示，如果涉及到数据的频繁查询，建议尽量使用数字索引；经过实践验证，在 JS 对象中查找元素，数字索引会比字符串索引快很多，而且样本量越大，字符串越复杂，速度相差就越明显。如下"},{"type":"element","tagName":"a","properties":{"href":"https://codepen.io/zhuxudong/pen/ZEeEyNV"},"children":[{"type":"text","value":"案例"}]},{"type":"text","value":"，对比了从 1000 个样本中分别使用数字索引和字符串索引，速度相差 10 倍以上：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805709373-7323231b-7501-4e13-b14c-ca4d5cd10052.png#clientId=u59b6cee5-37a0-4&from=ui&id=u9a2d6347&margin=%5Bobject%20Object%5D&name=1620725995655-c51876c1-4bee-4bdf-9f46-b2d38f2beba1.png&originHeight=152&originWidth=750&originalType=binary&size=45853&status=done&style=none&taskId=u5be8c152-fcb7-4052-9ae3-f18d7e0e4ec","alt":"1620725995655-c51876c1-4bee-4bdf-9f46-b2d38f2beba1.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"更新渲染状态","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%9B%B4%E6%96%B0%E6%B8%B2%E6%9F%93%E7%8A%B6%E6%80%81","ariaLabel":"更新渲染状态 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"更新渲染状态"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第五个阶段是更新渲染状态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在图形渲染管线中，存在着众多平级的渲染状态，比如深度测试、颜色混合模式、模版测试、 背面剔除。因此引擎设计将众多的渲染状态分为了"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"渲染状态"}]},{"type":"text","value":"（BlendState）"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"、深度状态"}]},{"type":"text","value":"（DepthState）"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"、模版状态"}]},{"type":"text","value":"（StencilState）"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"、光栅化状态"}]},{"type":"text","value":"（RasterState）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805729578-1aee2cd9-455b-4acf-9469-02b5ebf50cbd.png#clientId=u59b6cee5-37a0-4&from=ui&height=233&id=u2b8cf636&margin=%5Bobject%20Object%5D&name=1620467710622-3c51e37d-2c4b-4bb4-a454-2e046abd6aac.png&originHeight=466&originWidth=516&originalType=binary&size=25084&status=done&style=none&taskId=uad396415-3658-4b28-8161-70e4e7bf5b9&width=258","alt":"1620467710622-3c51e37d-2c4b-4bb4-a454-2e046abd6aac.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"判断重复"}]},{"type":"text","value":"。渲染状态的更新需要与 GPU 通信，比较耗性能，因此在改变渲染状态(RenderState)时需要进行判重，如果与缓存值重复，则不改变此渲染状态。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620805751896-555e8cf4-7233-4aee-bbc4-dfc53fa5498f.png#clientId=u59b6cee5-37a0-4&from=ui&id=ufd7aef6a&margin=%5Bobject%20Object%5D&name=1611973640681-bf01675d-406e-4d13-bc7a-75c1094b9f60.png&originHeight=236&originWidth=547&originalType=binary&size=156411&status=done&style=none&taskId=u41437338-4b24-4da5-b9b0-7f589eb8552","alt":"1611973640681-bf01675d-406e-4d13-bc7a-75c1094b9f60.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"开关过滤"}]},{"type":"text","value":"。渲染状态是有层级关系的，运行时采用 **总开关  + 子状态配置 **的优先级，来决定是否进行 GPU 通信。比如在深度状态相关的配置中，总开关为开启/关闭深度测试，状态配置为深度写入、深度比较函数，那么只有开启深度开关这个总开关后，深度写入这些状态配置才会生效，才会更新 GPU 的渲染状态。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"总结","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%80%BB%E7%BB%93","ariaLabel":"总结 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"总结"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"针对渲染管线的优化手段还有很多，一般情况下，Oasis 引擎的"},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/0.3/api/classes/core.basicrenderpipeline.html"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"通用渲染管线"}]}]},{"type":"text","value":"已经能够满足大部分开发者的需求，如果存在特殊的渲染需求，可以通过 "},{"type":"element","tagName":"a","properties":{"href":"https://oasisengine.cn/#/"},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Oasis 引擎官网"}]}]},{"type":"text","value":"了解更多引擎相关设计。希望这篇文章能够通过引擎的部分设计思路和优化手段，带给大家一点帮助。\n​"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"最后","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%9C%80%E5%90%8E","ariaLabel":"最后 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"最后"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"欢迎大家 star 我们的"},{"type":"element","tagName":"a","properties":{"href":"https://github.com/oasis-engine/engine"},"children":[{"type":"text","value":" github 仓库"}]},{"type":"text","value":"，也可以随时关注我们的后续"},{"type":"element","tagName":"a","properties":{"href":"https://github.com/orgs/oasis-engine/projects"},"children":[{"type":"text","value":"规划"}]},{"type":"text","value":"，也可以在 "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/oasis-engine/engine/issues"},"children":[{"type":"text","value":"issues"}]},{"type":"text","value":" 里给我们提需求和问题。开发者可以加入到我们的钉钉群里来跟我们吐槽和探讨一些问题：\n"},{"type":"element","tagName":"img","properties":{"src":"https://cdn.nlark.com/yuque/0/2021/png/1255339/1620806319325-f2c9d51a-2a76-4c79-9f3e-14f579e3b18c.png#clientId=u2c4a189e-b433-4&from=ui&height=743&id=u7b5848cc&margin=%5Bobject%20Object%5D&name=1617693093025-5653062d-8bfc-4f3c-b8ed-f1085c055114.png&originHeight=1485&originWidth=1125&originalType=binary&size=281805&status=done&style=none&taskId=u01345d87-dfae-41ed-8e48-66878eecce4&width=563","alt":"1617693093025-5653062d-8bfc-4f3c-b8ed-f1085c055114.png"},"children":[]},{"type":"text","value":"\n**无论你是渲染、TA 、Web 前端或是游戏方向，只要你和我们一样，渴望实现心中的绿洲，欢迎投递简历到 **"},{"type":"element","tagName":"a","properties":{"href":"mailto:chenmo.gl@antgroup.com"},"children":[{"type":"text","value":"chenmo.gl@antgroup.com"}]},{"type":"text","value":"。"}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E5%BC%95%E8%A8%80\">引言</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E8%A7%86%E9%94%A5%E4%BD%93%E5%89%94%E9%99%A4\">视锥体剔除</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E6%B8%B2%E6%9F%93%E9%98%9F%E5%88%97%E6%8E%92%E5%BA%8F\">渲染队列排序</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E7%BC%96%E8%AF%91%E7%9D%80%E8%89%B2%E5%99%A8\">编译着色器</a></li>\n<li>\n<p><a href=\"/blog/rendering-pipeline-cn/#%E6%9B%B4%E6%96%B0%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%B0%E6%8D%AE\">更新着色器数据</a></p>\n<ul>\n<li><a href=\"/blog/rendering-pipeline-cn/#cpu-%E5%88%86%E5%9D%97%E6%9B%B4%E6%96%B0\">CPU 分块更新</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#gpu-%E5%88%86%E5%9D%97%E4%B8%8A%E4%BC%A0\">GPU 分块上传</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E9%A2%84%E5%88%86%E6%9E%90%E7%9D%80%E8%89%B2%E5%99%A8\">预分析着色器</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E4%BC%98%E5%8C%96%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0%E6%96%B9%E5%BC%8F\">优化数据上传方式</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E9%A2%84%E7%BB%91%E5%AE%9A%E7%BA%B9%E7%90%86%E5%8D%95%E5%85%83\">预绑定纹理单元</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E6%95%B0%E5%AD%97%E7%B4%A2%E5%BC%95%E7%9D%80%E8%89%B2%E5%99%A8%E6%95%B0%E6%8D%AE\">数字索引着色器数据</a></li>\n</ul>\n</li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E6%9B%B4%E6%96%B0%E6%B8%B2%E6%9F%93%E7%8A%B6%E6%80%81\">更新渲染状态</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"/blog/rendering-pipeline-cn/#%E6%9C%80%E5%90%8E\">最后</a></li>\n</ul>","frontmatter":{"title":"Oasis 引擎渲染管线的优化之路","order":null,"type":"Blog"},"fields":{"path":"/blog/rendering-pipeline.zh-CN.md","slug":"/blog/rendering-pipeline-cn","modifiedTime":1620906530683,"avatarList":"[]"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Oasis Engine v0.3 发布","order":null,"type":"Blog","time":"2021-04-07T00:00:00.000Z"},"fields":{"slug":"/blog/v0.3-release-cn","path":"/blog/v0.3-release.zh-CN.md"}}},{"node":{"frontmatter":{"title":"WebGL 中的图片解码优化","order":null,"type":"Blog","time":"2021-04-23T00:00:00.000Z"},"fields":{"slug":"/blog/image-decode-in-webgl-cn","path":"/blog/image-decode-in-webgl.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Oasis 引擎渲染管线的优化之路","order":null,"type":"Blog","time":"2021-05-12T00:00:00.000Z"},"fields":{"slug":"/blog/rendering-pipeline-cn","path":"/blog/rendering-pipeline.zh-CN.md"}}}]}},"pageContext":{"slug":"/blog/rendering-pipeline-cn","type":"/blog/","locale":"/-cn/"}},"staticQueryHashes":[]}